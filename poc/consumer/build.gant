system = 'poc-consumer'
buildDirectory = 'target/build'
testBuildDir = 'target/test'
instrumentDir = 'target/instrumented'
distDir = 'target/dist'
sourceDirectory = 'src'
testSrcDir = 'test'
javadocsDir = 'target/docs'
testReports = 'target/reports'
webDir = 'webapp'
version = 'unknown'

includeTargets << gant.targets.Clean

cleanDirectory << ['target', 'lib/build', 'lib/test', 'lib/dist']
cleanPattern << [ '**/*~' , '**/*.bak' ]

ant.property(file: 'build.properties')
ant.property(name: 'trifork-common', value: new File('../trifork-common').absolutePath)
ant.property(name: 'ivy.default.conf.dir', value: '${trifork-common}/etc/ivy')
ant.property(name: 'ivy.settings.file', value: '${trifork-common}/ivyconf.xml')
ant.property(name: "glassfish.home",  value:"/pack/glassfish-v2ur1/")
//ant.property(name: "wsdl.uri", value: "http://localhost:8880/poc-provider/ProviderService?wsdl")
//ant.property(name: "wsdl.uri", value: "http://saml-perf2.trifork.com:8080/poc-provider/ProviderService?wsdl")
ant.property(name: "wsdl.uri", value: "https://oiosaml.trifork.com:8082/poc-provider/ProviderService?wsdl")


includeTool << gant.tools.Ivy
includeTool << gant.tools.Execute

ant.path(id: 'classpath') {
	fileset (dir: 'lib') {
		include (name: '**/*.jar')
	}
	pathelement(location: buildDirectory)
}

doCompile = { srcdir, destdir ->
	ant.javac (srcdir: srcdir, destdir: destdir, debug: true, source: '1.5', target: '1.5', classpathref: 'classpath')
	ant.copy (todir: destdir) {
		fileset (dir: srcdir, excludes: '**/*.java')
	}
}

doResolve = { conf -> 
	ivy.retrieve(pattern: "lib/${conf}/[organisation]-[artifact].[ext]", conf: conf)
}

target (init : 'Initialize build') {
	[buildDirectory, testBuildDir, distDir, javadocsDir, testReports, "${testReports}/html", "target/genclasses", "target/gensrc"].each { dir -> 
		ant.mkdir (dir: dir)
	}
	execute.shell ( 'svn info', outProcessing: { l -> 
		m = l =~ /Last Changed Rev: (.*)/
		if (m.matches())
			version = m.group(1) 
	})
	println "Building ${system} version ${version}"
}

target (generate: 'Generate source files') {
	depends(init)
	depends(resolve)
	ant.taskdef(name: "wsimport", classname: "com.sun.tools.ws.ant.WsImport") {
            classpath(refid: "classpath")
	}
	wsimport(xendorsed: "true", verbose: true, keep: true, destdir: "target/genclasses", sourcedestdir: "target/gensrc", wsdl: '${wsdl.uri}', fork: true, extension: true) {
		jvmarg(value: "-Djavax.net.ssl.trustStore=${System.getProperty('user.home')}/.keystore")
	}
}

target (compile: 'Compile') {
	depends(init, resolve)
	doCompile('target/gensrc', buildDirectory)
	doCompile(sourceDirectory, buildDirectory)
}

target (resolve : 'Resolve dependencies') {
	depends(init)
	doResolve('build')
}

target (resolve_dist : 'Resolve dependencies') {
	depends(init)
	doResolve('dist')
}


target (publish: 'Publish build') {
	depends(resolve)
	depends(jar)
	delete (file: "${distDir}/ivy.xml")
	
	def ivyxml = new XmlParser().parseText(new File('ivy.xml').getText())
	ivyxml.publications.artifact.findAll { it.'@name' != null }.each { a ->
		copy (file: "lib/${a.'@name'}.jar", todir: distDir)
	}
	
	ivy.publish (artifactspattern: "${distDir}/[artifact].[ext]", status: 'integration', resolver: 'local', pubrevision: version, overwrite: true)
}

target (war: 'Generate code and build war') {
	depends(init, resolve, generate, compile, resolve_dist)
	
	war (destfile: "${distDir}/${system}.war", webxml: "${webDir}/WEB-INF/web.xml") {
		classes(dir: buildDirectory)
		fileset (dir: webDir)
		lib (dir: 'lib/dist', includes: '*.jar')
		lib (dir: distDir, includes: "${system}-${version}.jar")
	}
}

target (dist: 'Create a distributable zip file') {
	depends(war)
	
	zip (destfile: "${distDir}/${system}-${version}.zip") {
		fileset (dir: distDir) {
			include(name: "${system}.war")
		}
		fileset (dir: '.') {
			include(name: 'LICENSE.txt')
			include(name: 'README.txt')
		}
	}
	
}