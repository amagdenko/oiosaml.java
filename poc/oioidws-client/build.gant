system = 'oioidws-client'
buildDirectory = 'target/build'
testBuildDir = 'target/test'
instrumentDir = 'target/instrumented'
distDir = 'target/dist'
sourceDirectory = 'src'
testSrcDir = 'test'
javadocsDir = 'target/docs'
testReports = 'target/reports'
webDir = 'webapp'
version = 'unknown'

ant.property(name: 'ivy.checksums', value: '')
ant.taskdef (  name : 'groovyc' , classname : 'org.codehaus.groovy.ant.Groovyc' )

includeTargets << gant.targets.Clean

cleanDirectory << ['target', 'lib/build', 'lib/test', 'lib/dist']
cleanPattern << [ '**/*~' , '**/*.bak' ]

includeTool << gant.tools.Ivy
includeTool << gant.tools.Execute

ant.path(id: 'classpath') {
	fileset (dir: 'lib') {
		include (name: '**/*.jar')
	}
	pathelement(location: buildDirectory)
}

doCompile = { srcdir, destdir ->
	ant.groovyc (srcdir: srcdir, destdir: destdir, classpathref: 'classpath')
	ant.javac (srcdir: srcdir, destdir: destdir, debug: true, source: '1.5', target: '1.5', classpathref: 'classpath')
	ant.copy (todir: destdir) {
		fileset (dir: srcdir, excludes: '**/*.java')
	}
}

doResolve = { conf -> 
	ivy.retrieve(pattern: "lib/${conf}/[organisation]-[artifact].[ext]", conf: conf)
}

target (init : 'Initialize build') {
	[buildDirectory, testBuildDir, distDir, javadocsDir, testReports, "${testReports}/html"].each { dir -> 
		ant.mkdir (dir: dir)
	}
	
	execute.shell ( 'svn info', outProcessing: { l -> 
		m = l =~ /Last Changed Rev: (.*)/
		if (m.matches())
			version = m.group(1) 
	})
	println "Building ${system} version ${version}"
}

target (compile: 'Compile') {
	depends(init, resolve)
	doCompile(sourceDirectory, buildDirectory)
}

target (resolve : 'Resolve dependencies') {
	depends(init)
	doResolve('build')
}

target (run : 'Run the client') {
	depends(compile)
	
	java (classpathref: 'classpath', classname: 'dk.itst.oiosaml.client.Client', fork: true)
}